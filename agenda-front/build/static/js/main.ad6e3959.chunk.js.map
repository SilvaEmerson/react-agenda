{"version":3,"sources":["components/AgendaItem/AgendaItem.js","components/Agenda/Agenda.js","components/Navbar/Navbar.js","components/AddContactForm/AddContactForm.js","App.js","serviceWorker.js","index.js"],"names":["AgendaItem","props","react_default","a","createElement","className","name","number","Agenda","contacts","map","el","AgendaItem_AgendaItem","key","id","Navbar","onChange","ev","filterFn","target","value","preventDefault","type","placeholder","aria-label","AddContact","sendPayload","handleChange","event","contactName","contactNumber","onClick","fetch","window","location","href","method","headers","Content-Type","body","JSON","stringify","then","res","afterAddFn","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getContacts","state","url","json","data","setState","isAddContact","bind","assertThisInitialized","filterContacts","string","filtredContacts","filter","contact","toLowerCase","includes","toString","searchString","_this2","Navbar_Navbar","AddContactForm_AddContact","Agenda_Agenda","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mMAEaA,SAAa,SAACC,GAAD,OACtBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,MACXJ,EAAAC,EAAAC,cAAA,oBAAYH,EAAMM,YCHbC,EAAS,SAACP,GAAD,OAClBA,EAAMQ,SAASC,IACb,SAAAC,GAAE,OAAIT,EAAAC,EAAAC,cAACQ,EAAD,CAAYC,IAAKF,EAAGG,GAAIR,KAAMK,EAAGL,KAAMC,OAAQI,EAAGJ,YCHjDQ,EAAS,SAACd,GAAD,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+DACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,YAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACXH,EAAAC,EAAAC,cAAA,SACIC,UAAU,0BACVW,SAAU,SAACC,GACThB,EAAMiB,SAASD,EAAGE,OAAOC,OACzBH,EAAGI,kBAELC,KAAK,SACLC,YAAY,2CACZC,aAAW,cCfVC,EAAa,SAACxB,GACzB,IAAMyB,EAAc,CAClBpB,KAAM,GACNC,OAAQ,IAGJoB,EAAe,SAAAC,GACnBF,EAAYE,EAAMT,OAAOL,IAAMc,EAAMT,OAAOC,OAc9C,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,OAAOjB,UAAU,eAAeS,GAAG,OAAOS,YAAY,OAChEH,MAAOM,EAAYG,YAAab,SAAUW,IAE5CzB,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,OAAOjB,UAAU,eAAeS,GAAG,SAASS,YAAY,YAClEH,MAAOM,EAAYI,cAAed,SAAUW,IAC9CzB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBS,GAAG,kBAAkBiB,QAlB1C,WACjBC,MAAMC,OAAOC,SAASC,KAAO,YAAY,CACvCC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUf,KAEpBgB,KAAK,SAAAC,GAAG,OAAI1C,EAAM2C,iBAUnB,SCuCSC,cA9Db,SAAAA,EAAY5C,GAAM,IAAA6C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhD,KA8BRoD,YAAc,WACZrB,MAAMc,EAAKQ,MAAMC,KACdb,KAAK,SAAAC,GAAG,OAAIA,EAAIa,SAChBd,KAAK,SAAAe,GACJX,EAAKrC,SAAWgD,EAChBX,EAAKY,SAAS,CAAEjD,SAAUgD,EAAME,cAAc,OAjClDb,EAAKrC,SAAW,GAEhBqC,EAAKQ,MAAQ,CACX7C,SAAU,GACV8C,IAAKtB,OAAOC,SAASC,KAAO,YAC5BwB,cAAc,GAGhBb,EAAKO,YAAcP,EAAKO,YAAYO,KAAjBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACnBA,EAAKgB,eAAiBhB,EAAKgB,eAAeF,KAApBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAZNA,oFAgBhBG,KAAKI,qDAGQU,GACb,IAAIC,EAAkBf,KAAKxC,SAEZ,KAAXsD,IACFC,EAAkBf,KAAKK,MAAM7C,SAC1BwD,OAAO,SAAAC,GAAO,OAAIA,EAAQ5D,KAAK6D,cAAcC,SAASL,IACjDG,EAAQ3D,OAAQ8D,WAAWF,cAAcC,SAASL,MAG5Dd,KAAKS,SAAS,CAAEjD,SAAUuD,EAAiBM,aAAcP,qCAYlD,IAAAQ,EAAAtB,KACP,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoE,EAAD,CAAQtD,SAAW+B,KAAKa,iBACxB5D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACV4C,KAAKK,MAAMK,aAIVzD,EAAAC,EAAAC,cAACqE,EAAD,CAAY7B,WAAaK,KAAKI,cAH9BnD,EAAAC,EAAAC,cAAA,UAAQkB,KAAK,SAASjB,UAAU,kBAAkB0B,QAChD,kBAAMwC,EAAKb,SAAS,CAACC,cAAc,MADrC,qBAMAV,KAAKK,MAAM7C,SACXP,EAAAC,EAAAC,cAACsE,EAAD,CAAQjE,SAAUwC,KAAKK,MAAM7C,WAC7BP,EAAAC,EAAAC,cAAA,0FAvDIuE,aCMEC,QACW,cAA7B3C,OAAOC,SAAS2C,UAEe,UAA7B5C,OAAOC,SAAS2C,UAEhB5C,OAAOC,SAAS2C,SAASC,MACvB,uECXNC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.ad6e3959.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const AgendaItem = (props) => (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h1>{props.name}</h1>\n        <p>Number: {props.number}</p>\n      </div>\n    </div>\n)","import React from \"react\";\nimport { AgendaItem } from \"../AgendaItem/AgendaItem\";\n\nexport const Agenda = (props) => (\n    props.contacts.map(\n      el => <AgendaItem key={el.id} name={el.name} number={el.number}/>\n    )\n)","import React from \"react\";\n\nexport const Navbar = (props) => (\n  <nav className=\"navbar fixed-top navbar-expand-sm navbar-primary bg-primary\">\n    <div className=\"navbar-brand col-1\">\n      Contatos\n    </div>\n\n    <div className=\"form-group justify-content-center row col-10 my-2\">\n        <input\n            className=\"form-control col-9 mr-2\"\n            onChange={(ev) => {\n              props.filterFn(ev.target.value)\n              ev.preventDefault()\n            }}\n            type=\"search\"\n            placeholder=\"Procure por número ou nome de contato\"\n            aria-label=\"Search\"\n        />\n    </div>\n  </nav>\n)","import React from \"react\";\n\nexport const AddContact = (props) => {\n  const sendPayload = {\n    name: '',\n    number: '',\n  }\n\n  const handleChange = event => {\n    sendPayload[event.target.id] = event.target.value;\n  }\n\n  const addContact = () => {\n    fetch(window.location.href + 'contacts/',{\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(sendPayload)\n    })\n      .then(res => props.afterAddFn())\n  }\n\n  return (\n    <div>\n      <input type=\"text\" className=\"form-control\" id=\"name\" placeholder=\"Nome\"\n        value={sendPayload.contactName} onChange={handleChange}/>\n      \n      <input type=\"text\" className=\"form-control\" id=\"number\" placeholder=\"Número\"\n        value={sendPayload.contactNumber} onChange={handleChange}/>\n      <button className=\"btn btn-primary\" id=\"btn-add-contact\" onClick={addContact}>Add</button>\n    </div>\n  )\n}","import React, { Component } from 'react';\nimport \"./App.css\"\nimport { Agenda } from \"./components/Agenda/Agenda\";\nimport { Navbar } from \"./components/Navbar/Navbar\";\nimport { AddContact } from \"./components/AddContactForm/AddContactForm\";\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.contacts = []\n\n    this.state = {\n      contacts: [],\n      url: window.location.href + 'contacts/',\n      isAddContact: false,\n    }\n\n    this.getContacts = this.getContacts.bind(this)\n    this.filterContacts = this.filterContacts.bind(this)\n  }\n\n  componentWillMount(){\n    this.getContacts()\n  }\n\n  filterContacts(string) {\n    let filtredContacts = this.contacts;\n\n    if (string !== '') {\n      filtredContacts = this.state.contacts\n        .filter(contact => contact.name.toLowerCase().includes(string)\n          || (contact.number).toString().toLowerCase().includes(string));\n    }\n\n    this.setState({ contacts: filtredContacts, searchString: string });\n  }\n\n  getContacts = () => {\n    fetch(this.state.url)\n      .then(res => res.json())\n      .then(data => {\n        this.contacts = data;\n        this.setState({ contacts: data, isAddContact: false  })\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar filterFn={ this.filterContacts }/>\n        <div className=\"container mt-10\">\n          {(!this.state.isAddContact)\n            ? <button type=\"button\" className=\"btn btn-success\" onClick={\n                () => this.setState({isAddContact: true})\n              }>Adicionar contato</button>\n            : <AddContact afterAddFn={ this.getContacts }/>\n          }\n\n          {(!!this.state.contacts)\n            ? <Agenda contacts={this.state.contacts} />\n            : <strong>Não foi possível encontrar o termo ou número procurado</strong>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"bootstrap\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}